//
//  MainInteractor.swift
//  B2SDemo
//
//  Created Egor Sakhabaev on 09.07.2021.
//  Copyright Â© 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Sakhabaev Egor @Banck
//  https://github.com/Banck/Swift-viper-template-for-xcode
//

import Foundation
import SwiftyStoreKit
import StoreKit

final class MainInteractor: MainInteractorInput {
    
    // MARK: - Properties
    weak var presenter: MainInteractorOutput?


    // MARK: - MainInteractorInput
    func fetchCurrentPurchaseStatus() {
//        guard let productId = currentProductId else {
//            return
//        }
        let appleValidator = AppleReceiptValidator(service: .production, sharedSecret: "3cc80272c7b048128d5087de730dd7dc")
        SwiftyStoreKit.verifyReceipt(using: appleValidator) { [weak self] result in
            switch result {
            case .success(let receipt):
                // Verify the purchase of a Subscription
                let purchasesResults = productIds.map {
                    SwiftyStoreKit.verifySubscription(
                        ofType: .autoRenewable,
                        productId: $0,
                        inReceipt: receipt
                    )
                }
                let _ = purchasesResults.first {
                    if case .purchased(let expiryDate, let items) = $0, expiryDate > Date() {
                        self?.presenter?.fetchedCurrentPurchaseStatus(with: (productId: items[0].productId, isActive: true, expDate: expiryDate))
                    }
                    return false
                }
            case .error(let error):
                self?.presenter?.fetchedCurrentPurchaseStatus(with: (productId: "", error: error))
                print("Receipt verification failed: \(error)")
            }
        }
    }
    
    func purchaseProduct(id: String) {
        SwiftyStoreKit.purchaseProduct(
            id,
            quantity: 1,
            atomically: true
        ) { [weak self] result in
            switch result {
            case .success(let product):
                self?.presenter?.fetchedFully()
                self?.presenter?.purchasedProduct()
                print("Purchased Success: \(product.productId)")
            case .error(let error):
                self?.presenter?.fetchedFully()
                self?.presenter?.purchasedProduct(with: error)
            }
        }
    }
}
